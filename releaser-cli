#!/usr/bin/env python3
from argparse import ArgumentParser
from json import dumps
from pprint import pprint

from releaser.fetchers import *

# Map choice list to fetcher classes
fetcher_map = {
    'pypi':     PypiReleaseFetcher,
    'npm':      NpmReleaseFetcher,
    'rubygems': RubyGemsReleaseFetcher,
    'maven':    MavenReleaseFetcher,
    'cargo':    CargoReleaseFetcher,
    'nuget':    NugetReleaseFetcher
}


ap = ArgumentParser()
ap.add_argument('-s', '--sorted', action='store_true', help="sort output by version string")
ap.add_argument('-o', '--output', choices=['text', 'json'], default='text', help='output type')
ap.add_argument('-v', '--verbose', action='store_true', default=False, help='controls verbosity level')
ap.add_argument('ecosystem', choices=list(fetcher_map.keys()))
ap.add_argument('package')
args = ap.parse_args()

# Instantiate, setup, and execute selected fetcher
fetcher = fetcher_map[args.ecosystem]()
fetcher.verbose = args.verbose
data = fetcher.fetch(args.package)
if args.sorted:
    data = sorted(data)

if args.output == 'json':
    print(dumps(list(map(lambda x: x.to_json_dict(), data)), indent=3))
else:
    pprint(data)
